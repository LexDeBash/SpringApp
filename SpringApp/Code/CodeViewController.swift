//
//  CodeViewController.swift
//  SpringApp
//
//  Created by Alexey Efimov on 18.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SpringAnimation

protocol CodeDisplayLogic: AnyObject {
    func displayCode(viewModel: CodeViewModel)
}

class CodeViewController: UIViewController {
        
    private var interactor: CodeBusinessLogic?
    var router: (NSObjectProtocol & CodeRoutingLogic & CodeDataPassing)?
    
    private lazy var modalView: SpringView = {
        let view = SpringView()
        view.isHidden = true
        return view
    }()
    
    private lazy var codeLabel: UILabel = {
        let label = UILabel()
        label.backgroundColor = UIColor(hex: "3D424E")
        label.text = "Code"
        label.textColor = UIColor(hex: "848CA0")
        label.font = UIFont(name: "Avenir Next Regular", size: 20)
        label.textAlignment = .center
        return label
    }()
    
    private lazy var codeTextView: UITextView = {
        let textView = UITextView()
        textView.backgroundColor = UIColor(hex: "3D424E")
        textView.isEditable = false
        textView.textColor = .white
        textView.font = UIFont(name: "Menlo Regular", size: 14)
        return textView
    }()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func loadView() {
        view = modalView
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupSubview(codeLabel, codeTextView)
        setupConstraints()
        interactor?.showCode()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        modalView.animation = "squeezeUp"
        modalView.isHidden = false
        modalView.animate()
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    private func setupSubview(_ subviews: UIView...) {
        subviews.forEach { subview in
            view.addSubview(subview)
        }
    }
    
    private func setupConstraints() {
        codeLabel.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            codeLabel.topAnchor.constraint(equalTo: view.topAnchor, constant: 0),
            codeLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
            codeLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            codeLabel.heightAnchor.constraint(equalToConstant: 80)
        ])
        
        codeTextView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            codeTextView.topAnchor.constraint(equalTo: codeLabel.bottomAnchor, constant: 0),
            codeTextView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
            codeTextView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            codeTextView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 100)
        ])
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = CodeInteractor()
        let presenter = CodePresenter()
        let router = CodeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

// MARK: - CodeDisplayLogic
extension CodeViewController: CodeDisplayLogic {
    func displayCode(viewModel: CodeViewModel) {
        codeTextView.text = viewModel.codeText
    }
}
