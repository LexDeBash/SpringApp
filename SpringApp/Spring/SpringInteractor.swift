//
//  SpringInteractor.swift
//  SpringApp
//
//  Created by Alexey Efimov on 16.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SpringAnimation

protocol SpringBusinessLogic {
    func didTapView(request: SpringRequest)
    func didSelectAnimationRow(request: SpringRequest)
    func didSelectCurveRow(request: SpringRequest)
    func forceSliderDidChanged(request: SpringRequest)
    func durationSliderDidChanged(request: SpringRequest)
    func delaySliderDidChanged(request: SpringRequest)
    func transformSpringViewButtonDidTapped(request: TransformRequest)
}

protocol SpringDataStore {
    var animation: Animation? { get set }
    var animations: [AnimationPreset] { get }
    var animationCurves: [AnimationCurve] { get }
    var isCircle: Bool { get }
}

class SpringInteractor: SpringBusinessLogic, SpringDataStore {
    
    var presenter: SpringPresentationLogic?
    var animation: Animation?
    var animations = AnimationPreset.allCases
    var animationCurves = AnimationCurve.allCases
    var isCircle = false
    
    private var response: SpringResponse {
        SpringResponse(animation: animation ?? Animation())
    }
    
    func didTapView(request: SpringRequest) {
        if animation == nil {
            animation = Animation()
        }
        presenter?.presentAnimation(response: response)
    }
    
    func didSelectAnimationRow(request: SpringRequest) {
        animation?.name = animations[request.rowIndex].rawValue
        presenter?.presentAnimation(response: response)
    }
    
    func didSelectCurveRow(request: SpringRequest) {
        animation?.curve = animationCurves[request.rowIndex].rawValue
        presenter?.presentAnimation(response: response)
    }
    
    func forceSliderDidChanged(request: SpringRequest) {
        animation?.force = Double(request.forceSliderValue)
        presenter?.presentAnimation(response: response)
    }
    
    func durationSliderDidChanged(request: SpringRequest) {
        animation?.duration = Double(request.durationSliderValue)
        presenter?.presentAnimation(response: response)
    }
    
    func delaySliderDidChanged(request: SpringRequest) {
        animation?.delay = Double(request.delaySliderValue)
        presenter?.presentAnimation(response: response)
    }
    
    func transformSpringViewButtonDidTapped(request: TransformRequest) {
        isCircle.toggle()
        let halfSize = request.viewSize / 2
        let cornerRadius = isCircle ? halfSize : 10
        
        let response = TransformResponse(
            keyPath: "cornerRadius",
            fromValue: isCircle ? 10 : halfSize,
            toValue: cornerRadius,
            duration: 0.2
        )
        presenter?.presentTransformation(response: response)
    }
}
