//
//  SpringModels.swift
//  SpringApp
//
//  Created by Alexey Efimov on 16.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import QuartzCore

typealias SpringRequest = Spring.Animate.Request
typealias SpringResponse = Spring.Animate.Response
typealias SpringViewModel = Spring.Animate.ViewModel

typealias TransformRequest = Spring.TransformSpringView.Request
typealias TransformResponse = Spring.TransformSpringView.Response
typealias TransformViewModel = Spring.TransformSpringView.ViewModel

enum Spring {
 
    // MARK: Animate Use case
    enum Animate {
        struct Request {
            var rowIndex = 0
            var forceSliderValue: Float = 1
            var durationSliderValue: Float = 0.7
            var delaySliderValue: Float = 0
        }
        
        struct Response {
            let animation: Animation
            var animationList: [String] = []
            var curveList: [String] = []
        }
        
        struct ViewModel {
            let animation: String
            let curve: String
            let force: Double
            let duration: Double
            let delay: Double
            let damping: Double
            let velocity: Double
            let scale: Double
            let x: Double
            let y: Double
            let rotate: Double
            
            let forceText: String
            let durationText: String
            let delayText: String
            
            var animationList: [String] = []
            var curveList: [String] = []
            
            init(animation: Animation) {
                self.animation = animation.name
                curve = animation.curve
                force = animation.force
                duration = animation.duration
                delay = animation.delay
                damping = animation.damping
                velocity = animation.velocity
                scale = animation.scale
                x = animation.x
                y = animation.y
                rotate = animation.rotate
                forceText = String(format: "Force: %.1f", animation.force)
                durationText = String(format: "Duration: %.1f", animation.duration)
                delayText = String(format: "Delay: %.1f", animation.delay)
            }
        }
        
    }
    
    // MARK: - Transform use case
    enum TransformSpringView {
        struct Request {
            var viewSize: Double
        }
        
        struct Response {
            let keyPath: String
            let fromValue: Double
            let toValue: Double
            let duration: Double
        }
        
        struct ViewModel {
            let cornerRadius: Double
            let animation: CABasicAnimation
            let key: String
        }
    }
}
