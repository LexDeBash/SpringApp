//
//  SpringPresenter.swift
//  SpringApp
//
//  Created by Alexey Efimov on 16.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import QuartzCore

protocol SpringPresentationLogic {
    func presentInitialValues(response: SpringResponse)
    func presentAnimation(response: SpringResponse)
    func presentTransformation(response: TransformResponse)
}

class SpringPresenter: SpringPresentationLogic {
    
    weak var viewController: SpringDisplayLogic?
    
    func presentInitialValues(response: SpringResponse) {
        var viewModel = SpringViewModel(animation: response.animation)
        viewModel.animationList = response.animationList
        viewModel.curveList = response.curveList
        viewController?.displayInitialValues(viewModel: viewModel)
    }
    
    func presentAnimation(response: SpringResponse) {
        let viewModel = SpringViewModel(animation: response.animation)
        viewController?.displayAnimation(viewModel: viewModel)
    }
    
    func presentTransformation(response: TransformResponse) {
        let animation = CABasicAnimation()
        animation.keyPath = response.keyPath
        animation.fromValue = response.fromValue
        animation.toValue = response.toValue
        animation.duration = response.duration
        let viewModel = TransformViewModel(
            cornerRadius: response.toValue,
            animation: animation,
            key: "radius"
        )
        viewController?.displayTransformation(viewModel: viewModel)
    }
}
